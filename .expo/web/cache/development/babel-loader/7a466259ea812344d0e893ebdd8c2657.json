{"ast":null,"code":"import { SQLite } from 'expo-sqlite';\nvar db = SQLite.openDatabase('places.db');\nexport var init = function init() {\n  var promise = new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql('CREATE TABLE IF NOT EXISTS places (id INTEGER PRIMARY KEY NOT NULL, title TEXT NOT NULL, imageUri TEXT NOT NULL, address TEXT NOT NULL, lat REAL NOT NULL, lng REAL NOT NULL);', [], function () {\n        resolve();\n      }, function (_, err) {\n        reject(err);\n      });\n    });\n  });\n  return promise;\n};\nexport var insertPlace = function insertPlace(title, imageUri, address, lat, lng) {\n  var promise = new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql(\"INSERT INTO places (title, imageUri, address, lat, lng) VALUES (?, ?, ?, ?, ?);\", [title, imageUri, address, lat, lng], function (_, result) {\n        resolve(result);\n      }, function (_, err) {\n        reject(err);\n      });\n    });\n  });\n  return promise;\n};\nexport var fetchPlaces = function fetchPlaces() {\n  var promise = new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql('SELECT * FROM places', [], function (_, result) {\n        resolve(result);\n      }, function (_, err) {\n        reject(err);\n      });\n    });\n  });\n  return promise;\n};","map":{"version":3,"sources":["C:/Users/user/Desktop/reactNative/test/helpers/db.js"],"names":["SQLite","db","openDatabase","init","promise","Promise","resolve","reject","transaction","tx","executeSql","_","err","insertPlace","title","imageUri","address","lat","lng","result","fetchPlaces"],"mappings":"AAAA,SAASA,MAAT,QAAuB,aAAvB;AAEA,IAAMC,EAAE,GAAGD,MAAM,CAACE,YAAP,CAAoB,WAApB,CAAX;AAEA,OAAO,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AACxB,MAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/CN,IAAAA,EAAE,CAACO,WAAH,CAAe,UAAAC,EAAE,EAAI;AACnBA,MAAAA,EAAE,CAACC,UAAH,CACE,gLADF,EAEE,EAFF,EAGE,YAAM;AACJJ,QAAAA,OAAO;AACR,OALH,EAME,UAACK,CAAD,EAAIC,GAAJ,EAAY;AACVL,QAAAA,MAAM,CAACK,GAAD,CAAN;AACD,OARH;AAUD,KAXD;AAYD,GAbe,CAAhB;AAcA,SAAOR,OAAP;AACD,CAhBM;AAkBP,OAAO,IAAMS,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAQC,QAAR,EAAkBC,OAAlB,EAA2BC,GAA3B,EAAgCC,GAAhC,EAAwC;AAC/D,MAAMd,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC7CN,IAAAA,EAAE,CAACO,WAAH,CAAe,UAAAC,EAAE,EAAI;AACnBA,MAAAA,EAAE,CAACC,UAAH,oFAEE,CAACI,KAAD,EAAQC,QAAR,EAAkBC,OAAlB,EAA2BC,GAA3B,EAAgCC,GAAhC,CAFF,EAGE,UAACP,CAAD,EAAIQ,MAAJ,EAAe;AACbb,QAAAA,OAAO,CAACa,MAAD,CAAP;AACD,OALH,EAME,UAACR,CAAD,EAAIC,GAAJ,EAAY;AACVL,QAAAA,MAAM,CAACK,GAAD,CAAN;AACD,OARH;AAUD,KAXD;AAYD,GAba,CAAhB;AAcE,SAAOR,OAAP;AACL,CAhBM;AAkBP,OAAO,IAAMgB,WAAW,GAAG,SAAdA,WAAc,GAAM;AAC7B,MAAMhB,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC7CN,IAAAA,EAAE,CAACO,WAAH,CAAe,UAAAC,EAAE,EAAI;AACnBA,MAAAA,EAAE,CAACC,UAAH,CACE,sBADF,EAEE,EAFF,EAGE,UAACC,CAAD,EAAIQ,MAAJ,EAAe;AACbb,QAAAA,OAAO,CAACa,MAAD,CAAP;AACD,OALH,EAME,UAACR,CAAD,EAAIC,GAAJ,EAAY;AACVL,QAAAA,MAAM,CAACK,GAAD,CAAN;AACD,OARH;AAUD,KAXD;AAYD,GAba,CAAhB;AAcE,SAAOR,OAAP;AACL,CAhBM","sourcesContent":["import { SQLite } from 'expo-sqlite';\n\nconst db = SQLite.openDatabase('places.db');\n\nexport const init = () => {\n  const promise = new Promise((resolve, reject) => {\n    db.transaction(tx => {\n      tx.executeSql(\n        'CREATE TABLE IF NOT EXISTS places (id INTEGER PRIMARY KEY NOT NULL, title TEXT NOT NULL, imageUri TEXT NOT NULL, address TEXT NOT NULL, lat REAL NOT NULL, lng REAL NOT NULL);',\n        [],\n        () => {\n          resolve();\n        },\n        (_, err) => {\n          reject(err);\n        }\n      );\n    });\n  });\n  return promise;\n};\n\nexport const insertPlace = (title, imageUri, address, lat, lng) => {\n    const promise = new Promise((resolve, reject) => {\n        db.transaction(tx => {\n          tx.executeSql(\n            `INSERT INTO places (title, imageUri, address, lat, lng) VALUES (?, ?, ?, ?, ?);`,\n            [title, imageUri, address, lat, lng],\n            (_, result) => {\n              resolve(result);\n            },\n            (_, err) => {\n              reject(err);\n            }\n          );\n        });\n      });\n      return promise;\n};\n\nexport const fetchPlaces = () => {\n    const promise = new Promise((resolve, reject) => {\n        db.transaction(tx => {\n          tx.executeSql(\n            'SELECT * FROM places',\n            [],\n            (_, result) => {\n              resolve(result);\n            },\n            (_, err) => {\n              reject(err);\n            }\n          );\n        });\n      });\n      return promise;\n};"]},"metadata":{},"sourceType":"module"}