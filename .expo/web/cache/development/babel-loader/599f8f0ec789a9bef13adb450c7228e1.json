{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\reactNative\\\\test\\\\App.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { StatusBar } from \"expo-status-bar\";\nimport React, { useEffect, useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport View from \"react-native-web/dist/exports/View\";\nimport * as Notifications from \"expo-notifications\";\nimport ReduxThunk from 'redux-thunk';\nimport { Provider, combineReducers, applyMiddleware } from 'react-redux';\nimport RootStack from \"./navigation/RootStack\";\nimport PlacesReducer from \"./store/places-reducer\";\nimport { init } from \"./helpers/db\";\nimport ImagePickerScreen from \"./ImagePicker/ImagePicker\";\nNotifications.setNotificationHandler({\n  handleNotification: function handleNotification() {\n    return _regeneratorRuntime.async(function handleNotification$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", {\n              shouldShowAlert: true\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n});\ninit().then(function () {\n  console.log('Initialized database');\n}).catch(function (err) {\n  console.log(\"db initialize failed error =>\", err);\n});\nvar rootReducer = combineReducers({\n  places: placesReducer\n});\nvar store = createStore(rootReducer, applyMiddleware(ReduxThunk));\nexport default function App() {\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      pushToken = _useState2[0],\n      setPushToken = _useState2[1];\n\n  return React.createElement(Provider, {\n    store: store,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 4\n    }\n  }, React.createElement(ImagePickerScreen, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 3\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  }\n});","map":{"version":3,"sources":["C:/Users/user/Desktop/reactNative/test/App.js"],"names":["StatusBar","React","useEffect","useState","Notifications","ReduxThunk","Provider","combineReducers","applyMiddleware","RootStack","PlacesReducer","init","ImagePickerScreen","setNotificationHandler","handleNotification","shouldShowAlert","then","console","log","catch","err","rootReducer","places","placesReducer","store","createStore","App","pushToken","setPushToken","styles","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;;AAEA,OAAO,KAAKC,aAAZ,MAA+B,oBAA/B;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,SAASC,QAAT,EAAmBC,eAAnB,EAAoCC,eAApC,QAA2D,aAA3D;AAGA,OAAOC,SAAP;AACA,OAAOC,aAAP;AACA,SAASC,IAAT;AACA,OAAOC,iBAAP;AAEAR,aAAa,CAACS,sBAAd,CAAqC;AACnCC,EAAAA,kBAAkB,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA,6CACX;AACLC,cAAAA,eAAe,EAAE;AADZ,aADW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADe,CAArC;AAQAJ,IAAI,GAAGK,IAAP,CAAY,YAAM;AAChBC,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACD,CAFD,EAEGC,KAFH,CAES,UAACC,GAAD,EAAS;AAACH,EAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6CE,GAA7C;AAAkD,CAFrE;AAKA,IAAMC,WAAW,GAAGd,eAAe,CAAC;AAClCe,EAAAA,MAAM,EAAEC;AAD0B,CAAD,CAAnC;AAIA,IAAMC,KAAK,GAAGC,WAAW,CAACJ,WAAD,EAAcb,eAAe,CAACH,UAAD,CAA7B,CAAzB;AAGA,eAAe,SAASqB,GAAT,GAAe;AAC5B,kBAAkCvB,QAAQ,EAA1C;AAAA;AAAA,MAAOwB,SAAP;AAAA,MAAkBC,YAAlB;;AAEA,SAEC,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAEJ,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAED,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFC,CAFD;AAUD;AAED,IAAMK,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE,MAFR;AAGTC,IAAAA,UAAU,EAAE,QAHH;AAITC,IAAAA,cAAc,EAAE;AAJP;AADoB,CAAlB,CAAf","sourcesContent":["import { StatusBar } from \"expo-status-bar\";\nimport React, { useEffect, useState } from \"react\";\nimport { StyleSheet, Button, View } from \"react-native\";\nimport * as Notifications from \"expo-notifications\";\nimport ReduxThunk from 'redux-thunk';\nimport { Provider, combineReducers, applyMiddleware } from 'react-redux';\n\n\nimport RootStack from './navigation/RootStack'\nimport PlacesReducer from './store/places-reducer'\nimport { init } from './helpers/db'\nimport ImagePickerScreen from './ImagePicker/ImagePicker'\n\nNotifications.setNotificationHandler({\n  handleNotification: async () => {\n    return {\n      shouldShowAlert: true,\n    };\n  },\n});\n\ninit().then(() => {\n  console.log('Initialized database')\n}).catch((err) => {console.log(\"db initialize failed error =>\", err)} )\n\n\nconst rootReducer = combineReducers({\n  places: placesReducer\n})\n\nconst store = createStore(rootReducer, applyMiddleware(ReduxThunk))\n\n\nexport default function App() {\n  const [pushToken, setPushToken] = useState();\n\n  return (\n\n   <Provider store={store}>\n\n  <ImagePickerScreen />\n\n  </Provider>\n\n\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}