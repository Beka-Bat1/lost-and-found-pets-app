{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\reactNative\\\\test\\\\screens\\\\NewPlaceScreen.js\";\n\nimport React, { useState, useCallback } from \"react\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useNavigation, useRoute } from '@react-navigation/native';\nimport { useDispatch } from 'react-redux';\nimport Colors from \"../constants/Colors\";\nimport ImgPicker from \"../components/ImgPicker\";\nimport LocationPicker from \"../components/LocationPicker\";\nimport * as placesActions from \"../store/places-actions\";\n\nvar NewPlaceScreen = function NewPlaceScreen(props) {\n  var dispatch = useDispatch();\n\n  var _useRoute = useRoute(),\n      params = _useRoute.params;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      titleValue = _useState2[0],\n      setTitleValue = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      selectedImage = _useState4[0],\n      setSelectedImage = _useState4[1];\n\n  var _useState5 = useState({\n    lat: null,\n    lng: null\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      selectedLocation = _useState6[0],\n      setSelectedLocation = _useState6[1];\n\n  console.log(params, \" params at NewPlacesScreen \");\n\n  var titleChangeHandler = function titleChangeHandler(text) {\n    setTitleValue(text);\n  };\n\n  var imageTakenHandler = function imageTakenHandler(imagePath) {\n    setSelectedImage(imagePath);\n  };\n\n  var locationPickedHandler = useCallback(function (location) {\n    setSelectedLocation(location);\n  }, []);\n\n  var savePlaceHandler = function savePlaceHandler() {\n    dispatch(placesActions.addPlace(titleValue, selectedImage, selectedLocation));\n    props.navigation.goBack();\n  };\n\n  return React.createElement(ScrollView, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.form,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.label,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, \"Title\"), React.createElement(TextInput, {\n    style: styles.textInput,\n    onChangeText: titleChangeHandler,\n    value: titleValue,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }), React.createElement(ImgPicker, {\n    onImageTaken: imageTakenHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }), React.createElement(LocationPicker, {\n    onLocationPicked: locationPickedHandler,\n    mapPickedLocation: selectedLocation,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }), React.createElement(Button, {\n    title: \"Save Place\",\n    color: Colors.primary,\n    onPress: savePlaceHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  })));\n};\n\nNewPlaceScreen.navigationOptions = {\n  headerTitle: 'Add Place'\n};\nvar styles = StyleSheet.create({\n  form: {\n    margin: 30\n  },\n  label: {\n    fontSize: 18,\n    marginBottom: 15\n  },\n  textInput: {\n    borderBottomColor: \"#ccc\",\n    borderBottomWidth: 1,\n    marginBottom: 15,\n    paddingVertical: 4,\n    paddingHorizontal: 2\n  }\n});\nexport default NewPlaceScreen;","map":{"version":3,"sources":["C:/Users/user/Desktop/reactNative/test/screens/NewPlaceScreen.js"],"names":["React","useState","useCallback","useNavigation","useRoute","useDispatch","Colors","ImgPicker","LocationPicker","placesActions","NewPlaceScreen","props","dispatch","params","titleValue","setTitleValue","selectedImage","setSelectedImage","lat","lng","selectedLocation","setSelectedLocation","console","log","titleChangeHandler","text","imageTakenHandler","imagePath","locationPickedHandler","location","savePlaceHandler","addPlace","navigation","goBack","styles","form","label","textInput","primary","navigationOptions","headerTitle","StyleSheet","create","margin","fontSize","marginBottom","borderBottomColor","borderBottomWidth","paddingVertical","paddingHorizontal"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport {\n  ScrollView,\n  View,\n  Button,\n  Text,\n  TextInput,\n  StyleSheet,\n} from \"react-native\";\nimport { useNavigation, useRoute } from '@react-navigation/native';\nimport { useDispatch } from 'react-redux';\n\nimport Colors from \"../constants/Colors\";\nimport ImgPicker from \"../components/ImgPicker\";\nimport LocationPicker from '../components/LocationPicker';\nimport * as placesActions from '../store/places-actions';\n\nconst NewPlaceScreen = (props) => {\n  const dispatch = useDispatch();\nconst { params } = useRoute();\n\n  const [titleValue, setTitleValue] = useState(\"\");\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [selectedLocation, setSelectedLocation] = useState({lat: null, lng: null});\n\nconsole.log(params, \" params at NewPlacesScreen \")\n  \n\n  const titleChangeHandler = (text) => {\n    // you could add validation\n    setTitleValue(text);\n  };\n\n  const imageTakenHandler = (imagePath) => {\n    setSelectedImage(imagePath);\n  };\n\n  const locationPickedHandler = useCallback(location => {\n    setSelectedLocation(location);\n  }, []);\n\n  const savePlaceHandler = () => {\n    dispatch(placesActions.addPlace(titleValue, selectedImage, selectedLocation));\n    props.navigation.goBack();\n  };\n\n\n  return (\n    <ScrollView>\n      <View style={styles.form}>\n        <Text style={styles.label}>Title</Text>\n        <TextInput\n          style={styles.textInput}\n          onChangeText={titleChangeHandler}\n          value={titleValue}\n        />\n        <ImgPicker onImageTaken={imageTakenHandler} />\n        <LocationPicker\n          // navigation={props.route}\n          onLocationPicked={locationPickedHandler}\n          mapPickedLocation={selectedLocation}\n        />\n        <Button\n          title='Save Place'\n          color={Colors.primary}\n          onPress={savePlaceHandler}\n        />\n      </View>\n    </ScrollView>\n  );\n};\n\nNewPlaceScreen.navigationOptions = {\n  headerTitle: 'Add Place'\n}\n\nconst styles = StyleSheet.create({\n  form: {\n    margin: 30,\n  },\n  label: {\n    fontSize: 18,\n    marginBottom: 15,\n  },\n  textInput: {\n    borderBottomColor: \"#ccc\",\n    borderBottomWidth: 1,\n    marginBottom: 15,\n    paddingVertical: 4,\n    paddingHorizontal: 2,\n  },\n});\n\nexport default NewPlaceScreen;\n"]},"metadata":{},"sourceType":"module"}