{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\reactNative\\\\test\\\\ImagePicker\\\\ImagePicker.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport * as ImagePicker from 'expo-image-picker';\n\nvar ImagePickerScreen = function ImagePickerScreen() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      image = _useState2[0],\n      setImage = _useState2[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$ImagePicker$re, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(ImagePicker.requestMediaLibraryPermissionsAsync());\n\n            case 2:\n              _await$ImagePicker$re = _context.sent;\n              status = _await$ImagePicker$re.status;\n\n              if (status !== 'granted') {\n                alert('Sorry, we need camera roll permissions to make this work!');\n              }\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  var pickImage = function pickImage() {\n    var result;\n    return _regeneratorRuntime.async(function pickImage$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.All,\n              AllowEditing: true,\n              aspect: [9, 16],\n              quality: 1\n            }));\n\n          case 2:\n            result = _context2.sent;\n            console.log(result);\n\n            if (!result.cancelled) {\n              setImage(result.uri);\n            }\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, React.createElement(Button, {\n    title: \"choose picture\",\n    style: {\n      width: 20,\n      height: 20\n    },\n    onPress: pickImage,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }), image && React.createElement(Image, {\n    source: {\n      uri: image\n    },\n    style: {\n      height: 300,\n      width: 300\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }\n  }));\n};\n\nexport default ImagePickerScreen;\nvar styles = StyleSheet.create({});","map":{"version":3,"sources":["C:/Users/user/Desktop/reactNative/test/ImagePicker/ImagePicker.js"],"names":["React","useState","useEffect","ImagePicker","ImagePickerScreen","image","setImage","requestMediaLibraryPermissionsAsync","status","alert","pickImage","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","All","AllowEditing","aspect","quality","result","console","log","cancelled","uri","flex","alignItems","justifyContent","width","height","styles","StyleSheet","create"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;;;;AAIA,OAAO,KAAKC,WAAZ,MAA6B,mBAA7B;;AAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAE9B,kBAA0BH,QAAQ,CAAC,IAAD,CAAlC;AAAA;AAAA,MAAOI,KAAP;AAAA,MAAcC,QAAd;;AAGFJ,EAAAA,SAAS,CAAC,YAAM;AACd,KAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAC4BC,WAAW,CAACI,mCAAZ,EAD5B;;AAAA;AAAA;AACWC,cAAAA,MADX,yBACWA,MADX;;AAEG,kBAAGA,MAAM,KAAK,SAAd,EAAwB;AACrBC,gBAAAA,KAAK,CAAC,2DAAD,CAAL;AACF;;AAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAQD,GATQ,EASN,EATM,CAAT;;AAWA,MAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACGP,WAAW,CAACQ,uBAAZ,CAAoC;AACrDC,cAAAA,UAAU,EAAET,WAAW,CAACU,gBAAZ,CAA6BC,GADY;AAErDC,cAAAA,YAAY,EAAE,IAFuC;AAGrDC,cAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,EAAJ,CAH6C;AAIrDC,cAAAA,OAAO,EAAE;AAJ4C,aAApC,CADH;;AAAA;AACZC,YAAAA,MADY;AAQhBC,YAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;;AACA,gBAAI,CAACA,MAAM,CAACG,SAAZ,EAAsB;AACpBf,cAAAA,QAAQ,CAACY,MAAM,CAACI,GAAR,CAAR;AACD;;AAXe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAcE,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAACC,MAAAA,IAAI,EAAC,CAAN;AAASC,MAAAA,UAAU,EAAE,QAArB;AAA+BC,MAAAA,cAAc,EAAE;AAA/C,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,gBAAd;AAA+B,IAAA,KAAK,EAAE;AAACC,MAAAA,KAAK,EAAE,EAAR;AAAYC,MAAAA,MAAM,EAAE;AAApB,KAAtC;AAA+D,IAAA,OAAO,EAAEjB,SAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAGGL,KAAK,IAAI,oBAAC,KAAD;AAAO,IAAA,MAAM,EAAE;AAACiB,MAAAA,GAAG,EAAEjB;AAAN,KAAf;AAA6B,IAAA,KAAK,EAAE;AAACsB,MAAAA,MAAM,EAAE,GAAT;AAAcD,MAAAA,KAAK,EAAE;AAArB,KAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHZ,CADF;AAOD,CArCD;;AAuCA,eAAetB,iBAAf;AAEA,IAAMwB,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB,EAAlB,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Button, Image, View, Platform, StyleSheet } from 'react-native';\r\n\r\n\r\nimport * as ImagePicker from 'expo-image-picker';\r\n\r\nconst ImagePickerScreen = () => {\r\n\r\n  const [image, setImage] = useState(null)\r\n\r\n\r\nuseEffect(() => {\r\n  (async () => {\r\n      const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();\r\n      if(status !== 'granted'){\r\n         alert('Sorry, we need camera roll permissions to make this work!');\r\n      }\r\n    \r\n  })();\r\n\r\n}, [])\r\n\r\nconst pickImage = async () => {\r\n  let result = await ImagePicker.launchImageLibraryAsync({\r\n    mediaTypes: ImagePicker.MediaTypeOptions.All,\r\n    AllowEditing: true,\r\n    aspect: [9, 16],\r\n    quality: 1,\r\n  })\r\n\r\n  console.log(result);\r\n  if (!result.cancelled){\r\n    setImage(result.uri)\r\n  }\r\n} \r\n\r\n  return (\r\n    <View style={{flex:1, alignItems: 'center', justifyContent: 'center'}}>\r\n      <Button title=\"choose picture\" style={{width: 20, height: 20}} onPress={pickImage} />\r\n\r\n      {image && <Image source={{uri: image}} style={{height: 300, width: 300}} />}\r\n    </View>\r\n  )\r\n}\r\n\r\nexport default ImagePickerScreen\r\n\r\nconst styles = StyleSheet.create({})\r\n"]},"metadata":{},"sourceType":"module"}