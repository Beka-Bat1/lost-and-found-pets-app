{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\reactNative\\\\test\\\\App.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { StatusBar } from \"expo-status-bar\";\nimport React, { useEffect, useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport View from \"react-native-web/dist/exports/View\";\nimport * as Notifications from \"expo-notifications\";\nNotifications.setNotificationHandler({\n  handleNotification: function handleNotification() {\n    return _regeneratorRuntime.async(function handleNotification$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", {\n              shouldShowAlert: true\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n});\nexport default function App() {\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      pushToken = _useState2[0],\n      setPushToken = _useState2[1];\n\n  useEffect(function () {\n    Notifications.getPermissionsAsync().then(function (statusObj) {\n      if (statusObj.status !== \"granted\") {\n        return Notifications.requestPermissionsAsync();\n      }\n\n      return statusObj;\n    }).then(function (statusObj) {\n      if (statusObj.status !== \"granted\") {\n        throw new Error(\"Permission not granted!\");\n      }\n    }).then(function () {\n      return Notifications.getExpoPushTokenAsync();\n    }).then(function (response) {\n      var token = response.data;\n      setPushToken(token);\n    }).catch(function (err) {\n      console.log(err);\n      return null;\n    });\n  }, []);\n  useEffect(function () {\n    var backgroundSubscription = Notifications.addNotificationResponseReceivedListener(function (response) {\n      console.log(response);\n    });\n    var foregroundSubscription = Notifications.addNotificationReceivedListener(function (notification) {\n      console.log(notification);\n    });\n    return function () {\n      backgroundSubscription.remove();\n      foregroundSubscription.remove();\n    };\n  }, []);\n\n  var triggerNotificationHandler = function triggerNotificationHandler() {\n    fetch(\"https://exp.host/--/api/v2/push/send\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Accept-Encoding\": \"gzip, deflate\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        to: pushToken,\n        data: {\n          extraData: \"Some data\"\n        },\n        title: \"Sent via the app\",\n        body: \"This push notification was sent via the app!\"\n      })\n    });\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }\n  }, React.createElement(Button, {\n    title: \"Trigger Notification\",\n    onPress: triggerNotificationHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }), React.createElement(StatusBar, {\n    style: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  }\n});","map":{"version":3,"sources":["C:/Users/user/Desktop/reactNative/test/App.js"],"names":["StatusBar","React","useEffect","useState","Notifications","setNotificationHandler","handleNotification","shouldShowAlert","App","pushToken","setPushToken","getPermissionsAsync","then","statusObj","status","requestPermissionsAsync","Error","getExpoPushTokenAsync","response","token","data","catch","err","console","log","backgroundSubscription","addNotificationResponseReceivedListener","foregroundSubscription","addNotificationReceivedListener","notification","remove","triggerNotificationHandler","fetch","method","headers","Accept","body","JSON","stringify","to","extraData","title","styles","container","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import { StatusBar } from \"expo-status-bar\";\nimport React, { useEffect, useState } from \"react\";\nimport { StyleSheet, Button, View } from \"react-native\";\nimport * as Notifications from \"expo-notifications\";\n\nNotifications.setNotificationHandler({\n  handleNotification: async () => {\n    return {\n      shouldShowAlert: true,\n    };\n  },\n});\n\nexport default function App() {\n  const [pushToken, setPushToken] = useState();\n\n  useEffect(() => {\n    Notifications.getPermissionsAsync()\n      .then((statusObj) => {\n        if (statusObj.status !== \"granted\") {\n          return Notifications.requestPermissionsAsync();\n        }\n        return statusObj;\n      })\n      .then((statusObj) => {\n        if (statusObj.status !== \"granted\") {\n          throw new Error(\"Permission not granted!\");\n        }\n      })\n      .then(() => {\n        return Notifications.getExpoPushTokenAsync();\n      })\n      .then((response) => {\n        const token = response.data;\n        setPushToken(token);\n      })\n      .catch((err) => {\n        console.log(err);\n        return null;\n      });\n  }, []);\n\n  useEffect(() => {\n    const backgroundSubscription =\n      Notifications.addNotificationResponseReceivedListener((response) => {\n        console.log(response);\n      });\n\n    const foregroundSubscription =\n      Notifications.addNotificationReceivedListener((notification) => {\n        console.log(notification);\n      });\n\n    return () => {\n      backgroundSubscription.remove();\n      foregroundSubscription.remove();\n    };\n  }, []);\n\n  const triggerNotificationHandler = () => {\n    // Notifications.scheduleNotificationAsync({\n    //   content: {\n    //     title: 'My first local notification',\n    //     body: 'This is the first local notification we are sending!',\n    //     data: { mySpecialData: 'Some text' },\n    //   },\n    //   trigger: {\n    //     seconds: 10,\n    //   },\n    // });\n    fetch(\"https://exp.host/--/api/v2/push/send\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Accept-Encoding\": \"gzip, deflate\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        to: pushToken,\n        data: { extraData: \"Some data\" },\n        title: \"Sent via the app\",\n        body: \"This push notification was sent via the app!\",\n      }),\n    });\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button\n        title='Trigger Notification'\n        onPress={triggerNotificationHandler}\n      />\n      <StatusBar style='auto' />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}