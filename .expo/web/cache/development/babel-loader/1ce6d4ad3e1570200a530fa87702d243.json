{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\reactNative\\\\test\\\\App.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { StatusBar } from \"expo-status-bar\";\nimport React, { useEffect, useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport View from \"react-native-web/dist/exports/View\";\nimport * as Notifications from \"expo-notifications\";\nimport ImagePickerScreen from \"./ImagePicker/ImagePicker\";\nNotifications.setNotificationHandler({\n  handleNotification: function handleNotification() {\n    return _regeneratorRuntime.async(function handleNotification$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", {\n              shouldShowAlert: true\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n});\nvar rootReducer = combineReducer();\nexport default function App() {\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      pushToken = _useState2[0],\n      setPushToken = _useState2[1];\n\n  return React.createElement(ImagePickerScreen, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 3\n    }\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  }\n});","map":{"version":3,"sources":["C:/Users/user/Desktop/reactNative/test/App.js"],"names":["StatusBar","React","useEffect","useState","Notifications","ImagePickerScreen","setNotificationHandler","handleNotification","shouldShowAlert","rootReducer","combineReducer","App","pushToken","setPushToken","styles","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;;AAEA,OAAO,KAAKC,aAAZ,MAA+B,oBAA/B;AAGA,OAAOC,iBAAP;AAEAD,aAAa,CAACE,sBAAd,CAAqC;AACnCC,EAAAA,kBAAkB,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA,6CACX;AACLC,cAAAA,eAAe,EAAE;AADZ,aADW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADe,CAArC;AASA,IAAMC,WAAW,GAAGC,cAAc,EAAlC;AAGA,eAAe,SAASC,GAAT,GAAe;AAC5B,kBAAkCR,QAAQ,EAA1C;AAAA;AAAA,MAAOS,SAAP;AAAA,MAAkBC,YAAlB;;AAwEA,SASA,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATA;AAaD;AAED,IAAMC,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE,MAFR;AAGTC,IAAAA,UAAU,EAAE,QAHH;AAITC,IAAAA,cAAc,EAAE;AAJP;AADoB,CAAlB,CAAf","sourcesContent":["import { StatusBar } from \"expo-status-bar\";\nimport React, { useEffect, useState } from \"react\";\nimport { StyleSheet, Button, View } from \"react-native\";\nimport * as Notifications from \"expo-notifications\";\n\n\nimport ImagePickerScreen from './ImagePicker/ImagePicker'\n\nNotifications.setNotificationHandler({\n  handleNotification: async () => {\n    return {\n      shouldShowAlert: true,\n    };\n  },\n});\n\n\nconst rootReducer = combineReducer()\n\n\nexport default function App() {\n  const [pushToken, setPushToken] = useState();\n\n  // useEffect(() => {\n  //   Notifications.getPermissionsAsync()\n  //     .then((statusObj) => {\n  //       if (statusObj.status !== \"granted\") {\n  //         return Notifications.requestPermissionsAsync();\n  //       }\n  //       return statusObj;\n  //     })\n  //     .then((statusObj) => {\n  //       if (statusObj.status !== \"granted\") {\n  //         throw new Error(\"Permission not granted!\");\n  //       }\n  //     })\n  //     .then(() => {\n  //       return Notifications.getExpoPushTokenAsync();\n  //     })\n  //     .then((response) => {\n  //       const token = response.data;\n  //       setPushToken(token);\n  //     })\n  //     .catch((err) => {\n  //       console.log(err);\n  //       return null;\n  //     });\n  // }, []);\n\n  // useEffect(() => {\n  //   const backgroundSubscription =\n  //     Notifications.addNotificationResponseReceivedListener((response) => {\n  //       console.log(response);\n  //     });\n\n  //   const foregroundSubscription =\n  //     Notifications.addNotificationReceivedListener((notification) => {\n  //       console.log(notification);\n  //     });\n\n  //   return () => {\n  //     backgroundSubscription.remove();\n  //     foregroundSubscription.remove();\n  //   };\n  // }, []);\n\n  // const triggerNotificationHandler = () => {\n    // Notifications.scheduleNotificationAsync({\n    //   content: {\n    //     title: 'My first local notification',\n    //     body: 'This is the first local notification we are sending!',\n    //     data: { mySpecialData: 'Some text' },\n    //   },\n    //   trigger: {\n    //     seconds: 10,\n    //   },\n    // });\n  //   fetch(\"https://exp.host/--/api/v2/push/send\", {\n  //     method: \"POST\",\n  //     headers: {\n  //       Accept: \"application/json\",\n  //       \"Accept-Encoding\": \"gzip, deflate\",\n  //       \"Content-Type\": \"application/json\",\n  //     },\n  //     body: JSON.stringify({\n  //       to: pushToken,\n  //       data: { extraData: \"Some data\" },\n  //       title: \"Sent via the app\",\n  //       body: \"This push notification was sent via the app!\",\n  //     }),\n  //   });\n  // };\n\n  return (\n    // <View style={styles.container}>\n    //   <Button\n    //     title='Trigger Notification'\n    //     onPress={triggerNotificationHandler}\n    //   />\n    //   <StatusBar style='auto' />\n    // </View>\n\n  <ImagePickerScreen />\n\n\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}