{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\reactNative\\\\test\\\\screens\\\\MapScreen.js\";\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport MapView, { Marker } from 'react-native-maps';\nimport Colors from \"../constants/Colors\";\nimport { useNavigation, useRoute } from '@react-navigation/native';\n\nvar MapScreen = function MapScreen(props) {\n  var _useNavigation = useNavigation(),\n      navigate = _useNavigation.navigate,\n      setParams = _useNavigation.setParams;\n\n  var _useRoute = useRoute(),\n      params = _useRoute.params;\n\n  console.log(params, 'param at MapScren');\n  var _params$initialLocati = params.initialLocation,\n      initialLocation = _params$initialLocati === void 0 ? {\n    lat: 37,\n    lng: 38\n  } : _params$initialLocati,\n      _params$readonly = params.readonly,\n      readonly = _params$readonly === void 0 ? false : _params$readonly;\n\n  var _useState = useState(initialLocation),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedLocation = _useState2[0],\n      setSelectedLocation = _useState2[1];\n\n  var mapRegion = {\n    latitude: initialLocation.lat,\n    longitude: initialLocation.lng,\n    latitudeDelta: 0.0922,\n    longitudeDelta: 0.0421\n  };\n\n  var selectLocationHandler = function selectLocationHandler(event) {\n    if (readonly) {\n      return;\n    }\n\n    setSelectedLocation({\n      lat: event.nativeEvent.coordinate.latitude,\n      lng: event.nativeEvent.coordinate.longitude\n    });\n  };\n\n  var savePickedLocationHandler = useCallback(function () {\n    if (!selectedLocation) {\n      Alert.alert('No Location picked');\n      return;\n    }\n\n    navigate('NewPlace', {\n      pickedLocation: selectedLocation\n    });\n  }, [selectedLocation]);\n  useEffect(function () {\n    setParams({\n      saveLocation: savePickedLocationHandler\n    });\n  }, [savePickedLocationHandler]);\n  var markerCoordinates;\n\n  if (selectedLocation) {\n    markerCoordinates = {\n      latitude: selectedLocation.lat,\n      longitude: selectedLocation.lng\n    };\n  }\n\n  return React.createElement(MapView, {\n    style: styles.map,\n    region: mapRegion,\n    onPress: selectLocationHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, markerCoordinates && React.createElement(Marker, {\n    title: \"Picked Location\",\n    coordinate: markerCoordinates,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }));\n};\n\nMapScreen.navigationOptions = function (navData) {\n  var saveFn = navData.navigation.route.params('saveLocation');\n  var readonly = navData.navigation.getParam('readonly');\n\n  if (readonly) {\n    return {};\n  }\n\n  return {\n    headerRight: React.createElement(TouchableOpacity, {\n      style: styles.headerButton,\n      onPress: saveFn,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }\n    }, React.createElement(Text, {\n      style: styles.headerButtonText,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }\n    }, \"Save\"))\n  };\n};\n\nvar styles = StyleSheet.create({\n  map: {\n    flex: 1\n  },\n  headerButton: {\n    marginHorizontal: 20\n  },\n  headerButtonText: {\n    fontSize: 16,\n    color: Platform.OS === 'android' ? 'white' : Colors.primary\n  }\n});\nexport default MapScreen;","map":{"version":3,"sources":["C:/Users/user/Desktop/reactNative/test/screens/MapScreen.js"],"names":["React","useState","useEffect","useCallback","MapView","Marker","Colors","useNavigation","useRoute","MapScreen","props","navigate","setParams","params","console","log","initialLocation","lat","lng","readonly","selectedLocation","setSelectedLocation","mapRegion","latitude","longitude","latitudeDelta","longitudeDelta","selectLocationHandler","event","nativeEvent","coordinate","savePickedLocationHandler","Alert","alert","pickedLocation","saveLocation","markerCoordinates","styles","map","navigationOptions","navData","saveFn","navigation","route","getParam","headerRight","headerButton","headerButtonText","StyleSheet","create","flex","marginHorizontal","fontSize","color","Platform","OS","primary"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TouchableOpacity,\n  Platform\n} from 'react-native';\nimport MapView, { Marker } from 'react-native-maps';\n\nimport Colors from '../constants/Colors';\nimport { useNavigation, useRoute } from '@react-navigation/native'\n\nconst MapScreen = props => {\n\n  const { navigate, setParams } = useNavigation();\n  const { params } = useRoute()\n\n  console.log(params, 'param at MapScren')\n  \n  const {initialLocation={lat: 37, lng: 38}, readonly=false } = params;\n\n  const [selectedLocation, setSelectedLocation] = useState(initialLocation);\n\n  const mapRegion = {\n    latitude: initialLocation.lat,\n    longitude: initialLocation.lng,\n    latitudeDelta: 0.0922,\n    longitudeDelta: 0.0421\n  };\n\n  const selectLocationHandler = event => {\n    if (readonly) {\n      return;\n    }\n    setSelectedLocation({\n      lat: event.nativeEvent.coordinate.latitude,\n      lng: event.nativeEvent.coordinate.longitude\n    });\n  };\n\n  const savePickedLocationHandler = useCallback(() => {\n    if (!selectedLocation) {\n      Alert.alert('No Location picked')\n      return;\n    }\n    navigate('NewPlace', { pickedLocation: selectedLocation });\n  }, [selectedLocation]);\n\n  useEffect(() => {\n    setParams({ saveLocation: savePickedLocationHandler });\n  }, [savePickedLocationHandler]);\n\n  let markerCoordinates;\n\n  if (selectedLocation) {\n    markerCoordinates = {\n      latitude: selectedLocation.lat,\n      longitude: selectedLocation.lng\n    };\n  }\n\n  return (\n    <MapView\n      style={styles.map}\n      region={mapRegion}\n      onPress={selectLocationHandler}\n    >\n      {markerCoordinates && (\n        <Marker title=\"Picked Location\" coordinate={markerCoordinates} />\n      )}\n    </MapView>\n  );\n};\n\nMapScreen.navigationOptions = navData => {\n  const saveFn = navData.navigation.route.params('saveLocation');\n  const readonly = navData.navigation.getParam('readonly');\n  if (readonly) {\n    return {};\n  }\n  return {\n    headerRight: (\n      <TouchableOpacity style={styles.headerButton} onPress={saveFn}>\n        <Text style={styles.headerButtonText}>Save</Text>\n      </TouchableOpacity>\n    )\n  };\n};\n\nconst styles = StyleSheet.create({\n  map: {\n    flex: 1\n  },\n  headerButton: {\n    marginHorizontal: 20\n  },\n  headerButtonText: {\n    fontSize: 16,\n    color: Platform.OS === 'android' ? 'white' : Colors.primary\n  }\n});\n\nexport default MapScreen;\n"]},"metadata":{},"sourceType":"module"}