{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as FileSystem from \"expo-file-system\";\nimport { insertPlace, fetchPlaces } from \"../helpers/db\";\nexport var ADD_PLACE = \"ADD_PLACE\";\nexport var SET_PLACES = \"SET_PLACES\";\nexport var addPlace = function addPlace(title, image, location) {\n  return function _callee(dispatch) {\n    var response, resData, address, fileName, newPath, dbResult;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch(\"https://maps.googleapis.com/maps/api/geocode/json?latlng=\" + location.lat + \",\" + location.lng + \"&key=\" + process.env.googleApiKey));\n\n          case 2:\n            response = _context.sent;\n\n            if (response.ok) {\n              _context.next = 5;\n              break;\n            }\n\n            throw new Error(\"Something went wrong!\");\n\n          case 5:\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 7:\n            resData = _context.sent;\n\n            if (resData.results) {\n              _context.next = 10;\n              break;\n            }\n\n            throw new Error(\"Something went wrong!\");\n\n          case 10:\n            address = resData.results[0].formatted_address;\n            fileName = image.split('/').pop();\n            newPath = FileSystem.documentDirectory + fileName;\n            _context.prev = 13;\n            _context.next = 16;\n            return _regeneratorRuntime.awrap(FileSystem.moveAsync({\n              from: image,\n              to: newPath\n            }));\n\n          case 16:\n            _context.next = 18;\n            return _regeneratorRuntime.awrap(insertPlace(title, newPath, address, location.lat, location.lng));\n\n          case 18:\n            dbResult = _context.sent;\n            console.log(dbResult);\n            dispatch({\n              type: ADD_PLACE,\n              placeData: {\n                id: dbResult.insertId,\n                title: title,\n                image: newPath,\n                address: address,\n                coords: {\n                  lat: location.lat,\n                  lng: location.lng\n                }\n              }\n            });\n            _context.next = 27;\n            break;\n\n          case 23:\n            _context.prev = 23;\n            _context.t0 = _context[\"catch\"](13);\n            console.log(_context.t0, \"error occured\");\n            throw _context.t0;\n\n          case 27:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[13, 23]], Promise);\n  };\n};\nexport var loadPlaces = function loadPlaces() {\n  return function _callee2(dispatch) {\n    var dbResult;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(fetchPlaces());\n\n          case 3:\n            dbResult = _context2.sent;\n            console.log(dbResult);\n            dispatch({\n              type: SET_PLACES,\n              places: dbResult.rows._array\n            });\n            _context2.next = 11;\n            break;\n\n          case 8:\n            _context2.prev = 8;\n            _context2.t0 = _context2[\"catch\"](0);\n            throw _context2.t0;\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  };\n};","map":{"version":3,"sources":["C:/Users/user/Desktop/reactNative/test/store/places-actions.js"],"names":["FileSystem","insertPlace","fetchPlaces","ADD_PLACE","SET_PLACES","addPlace","title","image","location","dispatch","fetch","lat","lng","process","env","googleApiKey","response","ok","Error","json","resData","results","address","formatted_address","fileName","split","pop","newPath","documentDirectory","moveAsync","from","to","dbResult","console","log","type","placeData","id","insertId","coords","loadPlaces","places","rows","_array"],"mappings":";AAAA,OAAO,KAAKA,UAAZ,MAA4B,kBAA5B;AAEA,SAASC,WAAT,EAAsBC,WAAtB;AAEA,OAAO,IAAMC,SAAS,GAAG,WAAlB;AACP,OAAO,IAAMC,UAAU,GAAG,YAAnB;AAEP,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAQC,KAAR,EAAeC,QAAf,EAA4B;AAClD,SAAO,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACkBC,KAAK,+DACkCF,QAAQ,CAACG,GAD3C,SACkDH,QAAQ,CAACI,GAD3D,aACsEC,OAAO,CAACC,GAAR,CAAYC,YADlF,CADvB;;AAAA;AACCC,YAAAA,QADD;;AAAA,gBAKAA,QAAQ,CAACC,EALT;AAAA;AAAA;AAAA;;AAAA,kBAMG,IAAIC,KAAJ,CAAU,uBAAV,CANH;;AAAA;AAAA;AAAA,6CASiBF,QAAQ,CAACG,IAAT,EATjB;;AAAA;AASCC,YAAAA,OATD;;AAAA,gBAUAA,OAAO,CAACC,OAVR;AAAA;AAAA;AAAA;;AAAA,kBAWG,IAAIH,KAAJ,CAAU,uBAAV,CAXH;;AAAA;AAcCI,YAAAA,OAdD,GAcWF,OAAO,CAACC,OAAR,CAAgB,CAAhB,EAAmBE,iBAd9B;AAgBCC,YAAAA,QAhBD,GAgBYjB,KAAK,CAACkB,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,EAhBZ;AAiBCC,YAAAA,OAjBD,GAiBW3B,UAAU,CAAC4B,iBAAX,GAA+BJ,QAjB1C;AAAA;AAAA;AAAA,6CAoBGxB,UAAU,CAAC6B,SAAX,CAAqB;AACzBC,cAAAA,IAAI,EAAEvB,KADmB;AAEzBwB,cAAAA,EAAE,EAAEJ;AAFqB,aAArB,CApBH;;AAAA;AAAA;AAAA,6CAyBoB1B,WAAW,CAChCK,KADgC,EAEhCqB,OAFgC,EAGhCL,OAHgC,EAIhCd,QAAQ,CAACG,GAJuB,EAKhCH,QAAQ,CAACI,GALuB,CAzB/B;;AAAA;AAyBGoB,YAAAA,QAzBH;AAiCHC,YAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AAEAvB,YAAAA,QAAQ,CAAC;AACP0B,cAAAA,IAAI,EAAEhC,SADC;AAEPiC,cAAAA,SAAS,EAAE;AACTC,gBAAAA,EAAE,EAAEL,QAAQ,CAACM,QADJ;AAEThC,gBAAAA,KAAK,EAAEA,KAFE;AAGTC,gBAAAA,KAAK,EAAEoB,OAHE;AAITL,gBAAAA,OAAO,EAAEA,OAJA;AAKTiB,gBAAAA,MAAM,EAAE;AACN5B,kBAAAA,GAAG,EAAEH,QAAQ,CAACG,GADR;AAENC,kBAAAA,GAAG,EAAEJ,QAAQ,CAACI;AAFR;AALC;AAFJ,aAAD,CAAR;AAnCG;AAAA;;AAAA;AAAA;AAAA;AAiDHqB,YAAAA,OAAO,CAACC,GAAR,cAAiB,eAAjB;AAjDG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAqDD,CAtDM;AAwDP,OAAO,IAAMM,UAAU,GAAG,SAAbA,UAAa,GAAM;AAC9B,SAAO,kBAAO/B,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEoBP,WAAW,EAF/B;;AAAA;AAEG8B,YAAAA,QAFH;AAGHC,YAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAvB,YAAAA,QAAQ,CAAC;AAAE0B,cAAAA,IAAI,EAAE/B,UAAR;AAAoBqC,cAAAA,MAAM,EAAET,QAAQ,CAACU,IAAT,CAAcC;AAA1C,aAAD,CAAR;AAJG;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AASD,CAVM","sourcesContent":["import * as FileSystem from \"expo-file-system\";\n\nimport { insertPlace, fetchPlaces } from \"../helpers/db\";\n\nexport const ADD_PLACE = \"ADD_PLACE\";\nexport const SET_PLACES = \"SET_PLACES\";\n\nexport const addPlace = (title, image, location) => {\n  return async (dispatch) => {\n    const response = await fetch(\n      `https://maps.googleapis.com/maps/api/geocode/json?latlng=${location.lat},${location.lng}&key=${process.env.googleApiKey}`\n    );\n\n    if (!response.ok) {\n      throw new Error(\"Something went wrong!\");\n    }\n\n    const resData = await response.json();\n    if (!resData.results) {\n      throw new Error(\"Something went wrong!\");\n    }\n\n    const address = resData.results[0].formatted_address;\n\n    const fileName = image.split('/').pop();\n    const newPath = FileSystem.documentDirectory + fileName;\n\n    try {\n      await FileSystem.moveAsync({\n        from: image,\n        to: newPath,\n      });\n\n      const dbResult = await insertPlace(\n        title,\n        newPath,\n        address,\n        location.lat,\n        location.lng\n      );\n\n      console.log(dbResult);\n      \n      dispatch({\n        type: ADD_PLACE,\n        placeData: {\n          id: dbResult.insertId,\n          title: title,\n          image: newPath,\n          address: address,\n          coords: {\n            lat: location.lat,\n            lng: location.lng,\n          },\n        },\n      });\n    } catch (err) {\n      console.log(err, \"error occured\");\n      throw err;\n    }\n  };\n};\n\nexport const loadPlaces = () => {\n  return async (dispatch) => {\n    try {\n      const dbResult = await fetchPlaces();\n      console.log(dbResult);\n      dispatch({ type: SET_PLACES, places: dbResult.rows._array });\n    } catch (err) {\n      throw err;\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}