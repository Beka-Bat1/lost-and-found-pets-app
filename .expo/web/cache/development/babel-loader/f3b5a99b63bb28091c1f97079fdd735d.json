{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\reactNative\\\\test\\\\screens\\\\MapScreen.js\";\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport MapView, { Marker } from 'react-native-maps';\nimport Colors from \"../constants/Colors\";\n\nvar MapScreen = function MapScreen(props) {\n  var initialLocation = props.navigation.params.initialLocation;\n  var readonly = props.navigation.params.readonly;\n\n  var _useState = useState(initialLocation),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedLocation = _useState2[0],\n      setSelectedLocation = _useState2[1];\n\n  var mapRegion = {\n    latitude: initialLocation ? initialLocation.lat : 37.78,\n    longitude: initialLocation ? initialLocation.lng : -122.43,\n    latitudeDelta: 0.0922,\n    longitudeDelta: 0.0421\n  };\n\n  var selectLocationHandler = function selectLocationHandler(event) {\n    if (readonly) {\n      return;\n    }\n\n    setSelectedLocation({\n      lat: event.nativeEvent.coordinate.latitude,\n      lng: event.nativeEvent.coordinate.longitude\n    });\n  };\n\n  var savePickedLocationHandler = useCallback(function () {\n    if (!selectedLocation) {\n      return;\n    }\n\n    props.navigation.navigate('NewPlace', {\n      pickedLocation: selectedLocation\n    });\n  }, [selectedLocation]);\n  useEffect(function () {\n    props.navigation.setParams({\n      saveLocation: savePickedLocationHandler\n    });\n  }, [savePickedLocationHandler]);\n  var markerCoordinates;\n\n  if (selectedLocation) {\n    markerCoordinates = {\n      latitude: selectedLocation.lat,\n      longitude: selectedLocation.lng\n    };\n  }\n\n  return React.createElement(MapView, {\n    style: styles.map,\n    region: mapRegion,\n    onPress: selectLocationHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, markerCoordinates && React.createElement(Marker, {\n    title: \"Picked Location\",\n    coordinate: markerCoordinates,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }));\n};\n\nMapScreen.navigationOptions = function (navData) {\n  var saveFn = navData.navigation.getParam('saveLocation');\n  var readonly = navData.navigation.getParam('readonly');\n\n  if (readonly) {\n    return {};\n  }\n\n  return {\n    headerRight: React.createElement(TouchableOpacity, {\n      style: styles.headerButton,\n      onPress: saveFn,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 7\n      }\n    }, React.createElement(Text, {\n      style: styles.headerButtonText,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }, \"Save\"))\n  };\n};\n\nvar styles = StyleSheet.create({\n  map: {\n    flex: 1\n  },\n  headerButton: {\n    marginHorizontal: 20\n  },\n  headerButtonText: {\n    fontSize: 16,\n    color: Platform.OS === 'android' ? 'white' : Colors.primary\n  }\n});\nexport default MapScreen;","map":{"version":3,"sources":["C:/Users/user/Desktop/reactNative/test/screens/MapScreen.js"],"names":["React","useState","useEffect","useCallback","MapView","Marker","Colors","MapScreen","props","initialLocation","navigation","params","readonly","selectedLocation","setSelectedLocation","mapRegion","latitude","lat","longitude","lng","latitudeDelta","longitudeDelta","selectLocationHandler","event","nativeEvent","coordinate","savePickedLocationHandler","navigate","pickedLocation","setParams","saveLocation","markerCoordinates","styles","map","navigationOptions","navData","saveFn","getParam","headerRight","headerButton","headerButtonText","StyleSheet","create","flex","marginHorizontal","fontSize","color","Platform","OS","primary"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,WAArC,QAAwD,OAAxD;;;;;;AAQA,OAAOC,OAAP,IAAkBC,MAAlB,QAAgC,mBAAhC;AAEA,OAAOC,MAAP;;AAGA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAC,KAAK,EAAI;AACzB,MAAMC,eAAe,GAAGD,KAAK,CAACE,UAAN,CAAiBC,MAAjB,CAAwBF,eAAhD;AACA,MAAMG,QAAQ,GAAGJ,KAAK,CAACE,UAAN,CAAiBC,MAAjB,CAAwBC,QAAzC;;AAEA,kBAAgDX,QAAQ,CAACQ,eAAD,CAAxD;AAAA;AAAA,MAAOI,gBAAP;AAAA,MAAyBC,mBAAzB;;AAEA,MAAMC,SAAS,GAAG;AAChBC,IAAAA,QAAQ,EAAEP,eAAe,GAAGA,eAAe,CAACQ,GAAnB,GAAyB,KADlC;AAEhBC,IAAAA,SAAS,EAAET,eAAe,GAAGA,eAAe,CAACU,GAAnB,GAAyB,CAAC,MAFpC;AAGhBC,IAAAA,aAAa,EAAE,MAHC;AAIhBC,IAAAA,cAAc,EAAE;AAJA,GAAlB;;AAOA,MAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAAC,KAAK,EAAI;AACrC,QAAIX,QAAJ,EAAc;AACZ;AACD;;AACDE,IAAAA,mBAAmB,CAAC;AAClBG,MAAAA,GAAG,EAAEM,KAAK,CAACC,WAAN,CAAkBC,UAAlB,CAA6BT,QADhB;AAElBG,MAAAA,GAAG,EAAEI,KAAK,CAACC,WAAN,CAAkBC,UAAlB,CAA6BP;AAFhB,KAAD,CAAnB;AAID,GARD;;AAUA,MAAMQ,yBAAyB,GAAGvB,WAAW,CAAC,YAAM;AAClD,QAAI,CAACU,gBAAL,EAAuB;AAErB;AACD;;AACDL,IAAAA,KAAK,CAACE,UAAN,CAAiBiB,QAAjB,CAA0B,UAA1B,EAAsC;AAAEC,MAAAA,cAAc,EAAEf;AAAlB,KAAtC;AACD,GAN4C,EAM1C,CAACA,gBAAD,CAN0C,CAA7C;AAQAX,EAAAA,SAAS,CAAC,YAAM;AACdM,IAAAA,KAAK,CAACE,UAAN,CAAiBmB,SAAjB,CAA2B;AAAEC,MAAAA,YAAY,EAAEJ;AAAhB,KAA3B;AACD,GAFQ,EAEN,CAACA,yBAAD,CAFM,CAAT;AAIA,MAAIK,iBAAJ;;AAEA,MAAIlB,gBAAJ,EAAsB;AACpBkB,IAAAA,iBAAiB,GAAG;AAClBf,MAAAA,QAAQ,EAAEH,gBAAgB,CAACI,GADT;AAElBC,MAAAA,SAAS,EAAEL,gBAAgB,CAACM;AAFV,KAApB;AAID;;AAED,SACE,oBAAC,OAAD;AACE,IAAA,KAAK,EAAEa,MAAM,CAACC,GADhB;AAEE,IAAA,MAAM,EAAElB,SAFV;AAGE,IAAA,OAAO,EAAEO,qBAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGS,iBAAiB,IAChB,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,iBAAd;AAAgC,IAAA,UAAU,EAAEA,iBAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,CADF;AAWD,CAvDD;;AAyDAxB,SAAS,CAAC2B,iBAAV,GAA8B,UAAAC,OAAO,EAAI;AACvC,MAAMC,MAAM,GAAGD,OAAO,CAACzB,UAAR,CAAmB2B,QAAnB,CAA4B,cAA5B,CAAf;AACA,MAAMzB,QAAQ,GAAGuB,OAAO,CAACzB,UAAR,CAAmB2B,QAAnB,CAA4B,UAA5B,CAAjB;;AACA,MAAIzB,QAAJ,EAAc;AACZ,WAAO,EAAP;AACD;;AACD,SAAO;AACL0B,IAAAA,WAAW,EACT,oBAAC,gBAAD;AAAkB,MAAA,KAAK,EAAEN,MAAM,CAACO,YAAhC;AAA8C,MAAA,OAAO,EAAEH,MAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAEJ,MAAM,CAACQ,gBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAFG,GAAP;AAOD,CAbD;;AAeA,IAAMR,MAAM,GAAGS,UAAU,CAACC,MAAX,CAAkB;AAC/BT,EAAAA,GAAG,EAAE;AACHU,IAAAA,IAAI,EAAE;AADH,GAD0B;AAI/BJ,EAAAA,YAAY,EAAE;AACZK,IAAAA,gBAAgB,EAAE;AADN,GAJiB;AAO/BJ,EAAAA,gBAAgB,EAAE;AAChBK,IAAAA,QAAQ,EAAE,EADM;AAEhBC,IAAAA,KAAK,EAAEC,QAAQ,CAACC,EAAT,KAAgB,SAAhB,GAA4B,OAA5B,GAAsC1C,MAAM,CAAC2C;AAFpC;AAPa,CAAlB,CAAf;AAaA,eAAe1C,SAAf","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TouchableOpacity,\n  Platform\n} from 'react-native';\nimport MapView, { Marker } from 'react-native-maps';\n\nimport Colors from '../constants/Colors';\n\n\nconst MapScreen = props => {\n  const initialLocation = props.navigation.params.initialLocation;\n  const readonly = props.navigation.params.readonly;\n\n  const [selectedLocation, setSelectedLocation] = useState(initialLocation);\n\n  const mapRegion = {\n    latitude: initialLocation ? initialLocation.lat : 37.78,\n    longitude: initialLocation ? initialLocation.lng : -122.43,\n    latitudeDelta: 0.0922,\n    longitudeDelta: 0.0421\n  };\n\n  const selectLocationHandler = event => {\n    if (readonly) {\n      return;\n    }\n    setSelectedLocation({\n      lat: event.nativeEvent.coordinate.latitude,\n      lng: event.nativeEvent.coordinate.longitude\n    });\n  };\n\n  const savePickedLocationHandler = useCallback(() => {\n    if (!selectedLocation) {\n      // could show an alert!\n      return;\n    }\n    props.navigation.navigate('NewPlace', { pickedLocation: selectedLocation });\n  }, [selectedLocation]);\n\n  useEffect(() => {\n    props.navigation.setParams({ saveLocation: savePickedLocationHandler });\n  }, [savePickedLocationHandler]);\n\n  let markerCoordinates;\n\n  if (selectedLocation) {\n    markerCoordinates = {\n      latitude: selectedLocation.lat,\n      longitude: selectedLocation.lng\n    };\n  }\n\n  return (\n    <MapView\n      style={styles.map}\n      region={mapRegion}\n      onPress={selectLocationHandler}\n    >\n      {markerCoordinates && (\n        <Marker title=\"Picked Location\" coordinate={markerCoordinates} />\n      )}\n    </MapView>\n  );\n};\n\nMapScreen.navigationOptions = navData => {\n  const saveFn = navData.navigation.getParam('saveLocation');\n  const readonly = navData.navigation.getParam('readonly');\n  if (readonly) {\n    return {};\n  }\n  return {\n    headerRight: (\n      <TouchableOpacity style={styles.headerButton} onPress={saveFn}>\n        <Text style={styles.headerButtonText}>Save</Text>\n      </TouchableOpacity>\n    )\n  };\n};\n\nconst styles = StyleSheet.create({\n  map: {\n    flex: 1\n  },\n  headerButton: {\n    marginHorizontal: 20\n  },\n  headerButtonText: {\n    fontSize: 16,\n    color: Platform.OS === 'android' ? 'white' : Colors.primary\n  }\n});\n\nexport default MapScreen;\n"]},"metadata":{},"sourceType":"module"}